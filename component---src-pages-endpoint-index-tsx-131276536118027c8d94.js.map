{"version":3,"file":"component---src-pages-endpoint-index-tsx-131276536118027c8d94.js","mappings":"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","sources":["webpack://deriv-com/./src/common/validation.ts","webpack://deriv-com/./src/components/hooks/use-localstorage-state.tsx","webpack://deriv-com/./src/pages/endpoint/index.tsx"],"sourcesContent":["import { localize } from 'components/localization'\n\nconst validation_regex = {\n    email: /^[^@]+@[^@]+\\.[^@.]{2,}$/,\n    url: /^[\\w|\\-|.]+$/,\n    alphabetic: /^[a-zA-Z]+$/,\n    number: /^\\d+$/,\n}\n\nconst validation = {\n    // Validation will return a string for error message\n    email: (input, message) => {\n        if (!validation_regex.email.test(input)) {\n            return message ? message : localize('Email is required')\n        } else {\n            return null\n        }\n    },\n    name: (input, message) => {\n        if (!input) {\n            return message ? message : localize('Name is required')\n        } else {\n            return null\n        }\n    },\n    required: (input, message) => {\n        if (!input) {\n            return message ? message : localize('This field is required')\n        } else {\n            return null\n        }\n    },\n    url: (input, message) => {\n        if (!validation_regex.url.test(input)) {\n            return message ? message : localize('Please enter a valid URL format')\n        } else {\n            return null\n        }\n    },\n    number: (input, message) => {\n        if (!validation_regex.number.test(input)) {\n            return message ? message : localize('Please enter a valid number')\n        } else {\n            return null\n        }\n    },\n    alphabetic: (input, message) => {\n        if (!validation_regex.alphabetic.test(input)) {\n            return message ? message : localize('Please enter only alphabetic characters')\n        } else {\n            return null\n        }\n    },\n}\n\nexport default validation\n","import { useState, useEffect } from 'react'\nimport { isBrowser, isNullUndefined, parseJSONString } from 'common/utility'\n\nexport const useLocalStorageState = (defaultValue, key) => {\n    const [value, setValue] = useState(() => {\n        const sticky_value = isBrowser() ? window.localStorage.getItem(key) : null\n        return sticky_value ? parseJSONString(sticky_value) : defaultValue\n    })\n\n    useEffect(() => {\n        if (isBrowser()) {\n            if (isNullUndefined(value)) {\n                window.localStorage.removeItem(key)\n            } else {\n                window.localStorage.setItem(key, value)\n            }\n        }\n    }, [key, value])\n\n    return [value, setValue]\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Formik, Form } from 'formik'\nimport device from 'themes/device'\nimport { WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\nimport { Container, SEO } from 'components/containers'\nimport { Header, Text } from 'components/elements'\nimport { Input, Button } from 'components/form'\nimport validation from 'common/validation'\nimport { trimSpaces } from 'common/utility'\nimport { default_server_url } from 'common/constants'\nimport { getAppId } from 'common/websocket/config'\nimport { DerivStore } from 'store'\nimport { useLocalStorageState } from 'components/hooks/use-localstorage-state'\n\ntype ValuesType = {\n    server_url?: string\n    app_id?: string\n    clients_country?: string\n}\n\ntype ActionsType = {\n    setSubmitting: (arg0: boolean) => void\n    setStatus: (arg0: { message?: string }) => void\n}\n\nconst StyledInput = styled(Input)`\n    & ~ label {\n        transform: translate(-0.6rem, -2rem) scale(0.7);\n        color: var(--color-black-3);\n        background-color: ${({ background }) =>\n            background ? `var(--color-${background})` : 'var(--color-grey-1)'};\n\n        @media ${device.tabletL} {\n            top: 9px;\n        }\n    }\n`\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 100vh;\n    padding: auto 0;\n    justify-content: start;\n`\n\nconst ButtonContainer = styled.div`\n    margin-top: 2rem;\n`\n\nconst InputGroup = styled.div`\n    width: 40rem;\n    margin: 0 auto 3.4rem;\n\n    & > div {\n        margin-bottom: 1rem;\n    }\n    & > div:last-child {\n        margin-bottom: 0;\n    }\n`\n\nconst StyledButton = styled(Button)`\n    margin: 0.8rem 0.4rem;\n`\n\nconst endpointValidation = (values: ValuesType) => {\n    const errors: ValuesType = {}\n\n    const server_url = trimSpaces(values ? values.server_url : '')\n    const app_id = trimSpaces(values ? values.app_id.toString() : '')\n    const clients_country = trimSpaces(values ? values.clients_country.toString() : '')\n    const server_url_error =\n        validation.required(server_url) ||\n        validation.url(server_url, 'Please enter a valid server URL')\n    const app_id_error =\n        validation.required(app_id) || validation.number(app_id, 'Please enter a valid app ID')\n    const clients_country_error =\n        validation.required(clients_country) || validation.alphabetic(clients_country)\n\n    if (server_url_error) {\n        errors.server_url = server_url_error\n    }\n\n    if (app_id_error) {\n        errors.app_id = app_id_error\n    }\n\n    if (clients_country_error) {\n        errors.clients_country = clients_country_error\n    }\n\n    return errors\n}\n\nconst Endpoint = () => {\n    const [server_url, setServerUrl] = useLocalStorageState(default_server_url, 'config.server_url')\n    const [app_id, setAppId] = useLocalStorageState(getAppId(), 'config.app_id')\n    const [reset_loading, setResetLoading] = React.useState(false)\n    const { website_status, setWebsiteStatus, website_status_loading } =\n        React.useContext(DerivStore)\n    const STATUS_TIMEOUT_DELAY = 1500\n    const RESET_TIMEOUT_DELAY = 500\n\n    const handleStatus = (setStatus: (arg0: { message?: string }) => void, message: string) => {\n        setStatus({ message })\n        setTimeout(() => {\n            setStatus({})\n        }, STATUS_TIMEOUT_DELAY)\n    }\n    const resetEndpointSettings = (setStatus: (status?: unknown) => void) => {\n        // reset local storage values\n        setResetLoading(true)\n        setServerUrl()\n        setAppId()\n        // adding the default storage values\n        setTimeout(() => {\n            setServerUrl(default_server_url)\n            setAppId(getAppId())\n            setResetLoading(false)\n        }, RESET_TIMEOUT_DELAY)\n        // reset website status values\n        setWebsiteStatus()\n        handleStatus(setStatus, 'Config has been reset successfully')\n        // TODO: if there is a change requires reload in the future\n        // window.location.reload()\n    }\n    const endpointSubmission = (values: ValuesType, actions: ActionsType) => {\n        actions.setSubmitting(true)\n        setServerUrl(values.server_url)\n        setAppId(values.app_id)\n\n        // handle website status changes\n        const new_website_status = { ...website_status, clients_country: values.clients_country }\n        setWebsiteStatus(new_website_status)\n        actions.setSubmitting(false)\n        handleStatus(actions.setStatus, 'Config has been updated')\n        // TODO: if there is a change requires reload in the future\n        window.location.reload()\n    }\n\n    return (\n        <Layout type=\"static\" margin_top={'0'}>\n            <SEO title=\"Endpoint\" description=\"Change deriv API endpoint.\" no_index />\n            <StyledContainer justify=\"center\" align=\"center\" direction=\"column\">\n                <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"80px\">\n                    Change API endpoint\n                </Header>\n                <Header\n                    as=\"h4\"\n                    type=\"sub-section-title\"\n                    align=\"center\"\n                    weight=\"500\"\n                    mt=\"0.5rem\"\n                    mb=\"3.8rem\"\n                >\n                    Update configuration for API endpoint or other settings\n                </Header>\n                <Formik\n                    initialValues={{\n                        server_url: server_url ? server_url : '',\n                        app_id: app_id ? app_id : '',\n                        // this implicit check is required by formik for `enableReinitialize` to work\n                        clients_country: website_status?.clients_country\n                            ? website_status?.clients_country\n                            : '',\n                    }}\n                    enableReinitialize={true}\n                    validate={endpointValidation}\n                    onSubmit={endpointSubmission}\n                >\n                    {({\n                        values,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                        setStatus,\n                        setFieldValue,\n                        isValid,\n                        dirty,\n                        touched,\n                        status,\n                    }) => (\n                        <Form noValidate>\n                            <InputGroup>\n                                <StyledInput\n                                    name=\"server_url\"\n                                    error={errors.server_url}\n                                    value={values.server_url}\n                                    disabled={reset_loading}\n                                    handleError={() => setFieldValue('server_url', '')}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    type=\"text\"\n                                    label=\"Server URL\"\n                                    background=\"white\"\n                                    placeholder={'e.g. green.binaryws.com'}\n                                />\n                                <StyledInput\n                                    name=\"app_id\"\n                                    error={errors.app_id}\n                                    value={values.app_id}\n                                    disabled={reset_loading}\n                                    handleError={() => setFieldValue('app_id', '')}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    type=\"text\"\n                                    label=\"App ID\"\n                                    background=\"white\"\n                                    placeholder={'e.g. 9999'}\n                                />\n                                <StyledInput\n                                    name=\"clients_country\"\n                                    error={errors.clients_country}\n                                    value={values.clients_country}\n                                    disabled={website_status_loading}\n                                    handleError={() => setFieldValue('clients_country', '')}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    type=\"text\"\n                                    label=\"Clients country\"\n                                    background=\"white\"\n                                    placeholder={'e.g. mt (for EU) or gb (for UK) or za (for P2P)'}\n                                />\n                            </InputGroup>\n                            <Text align=\"center\" color=\"green\">\n                                {status?.message && status.message}\n                            </Text>\n                            <ButtonContainer>\n                                <StyledButton\n                                    tertiary\n                                    onClick={() => resetEndpointSettings(setStatus)}\n                                    type=\"button\"\n                                >\n                                    Reset to original settings\n                                </StyledButton>\n                                <StyledButton\n                                    secondary\n                                    disabled={isSubmitting || !dirty || !touched || !isValid}\n                                    type=\"submit\"\n                                >\n                                    Submit changes\n                                </StyledButton>\n                            </ButtonContainer>\n                        </Form>\n                    )}\n                </Formik>\n            </StyledContainer>\n        </Layout>\n    )\n}\n\nexport default WithIntl()(Endpoint)\n"],"names":["validation_regex","email","url","alphabetic","number","validation","input","message","test","localize","name","required","useLocalStorageState","defaultValue","key","useState","sticky_value","isBrowser","window","localStorage","getItem","parseJSONString","value","setValue","useEffect","isNullUndefined","removeItem","setItem","StyledInput","styled","Input","withConfig","displayName","componentId","background","device","StyledContainer","Container","ButtonContainer","InputGroup","StyledButton","Button","endpointValidation","values","errors","server_url","trimSpaces","app_id","toString","clients_country","server_url_error","app_id_error","clients_country_error","WithIntl","default_server_url","setServerUrl","getAppId","setAppId","React","reset_loading","setResetLoading","DerivStore","website_status","setWebsiteStatus","website_status_loading","handleStatus","setStatus","setTimeout","Layout","type","margin_top","SEO","title","description","no_index","justify","align","direction","Header","as","mt","weight","mb","Formik","initialValues","enableReinitialize","validate","onSubmit","actions","setSubmitting","new_website_status","location","reload","handleChange","handleBlur","isSubmitting","setFieldValue","isValid","dirty","touched","status","Form","noValidate","error","disabled","handleError","onChange","onBlur","label","placeholder","Text","color","tertiary","onClick","resetEndpointSettings","secondary"],"sourceRoot":""}