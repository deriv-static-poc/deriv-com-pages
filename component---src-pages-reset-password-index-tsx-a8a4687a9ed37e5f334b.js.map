{"version":3,"file":"component---src-pages-reset-password-index-tsx-a8a4687a9ed37e5f334b.js","mappings":"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","sources":["webpack://deriv-com/./src/common/validation.ts","webpack://deriv-com/./src/pages/reset-password/index.tsx"],"sourcesContent":["import { localize } from 'components/localization'\n\nconst validation_regex = {\n    email: /^[^@]+@[^@]+\\.[^@.]{2,}$/,\n    url: /^[\\w|\\-|.]+$/,\n    alphabetic: /^[a-zA-Z]+$/,\n    number: /^\\d+$/,\n}\n\nconst validation = {\n    // Validation will return a string for error message\n    email: (input, message) => {\n        if (!validation_regex.email.test(input)) {\n            return message ? message : localize('Email is required')\n        } else {\n            return null\n        }\n    },\n    name: (input, message) => {\n        if (!input) {\n            return message ? message : localize('Name is required')\n        } else {\n            return null\n        }\n    },\n    required: (input, message) => {\n        if (!input) {\n            return message ? message : localize('This field is required')\n        } else {\n            return null\n        }\n    },\n    url: (input, message) => {\n        if (!validation_regex.url.test(input)) {\n            return message ? message : localize('Please enter a valid URL format')\n        } else {\n            return null\n        }\n    },\n    number: (input, message) => {\n        if (!validation_regex.number.test(input)) {\n            return message ? message : localize('Please enter a valid number')\n        } else {\n            return null\n        }\n    },\n    alphabetic: (input, message) => {\n        if (!validation_regex.alphabetic.test(input)) {\n            return message ? message : localize('Please enter only alphabetic characters')\n        } else {\n            return null\n        }\n    },\n}\n\nexport default validation\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Formik, Form } from 'formik'\nimport Layout from 'components/layout/layout'\nimport { localize, WithIntl } from 'components/localization'\nimport { Container, SEO } from 'components/containers'\nimport { Header, Text } from 'components/elements'\nimport { Input, Button } from 'components/form'\nimport validation from 'common/validation'\nimport { trimSpaces } from 'common/utility'\nimport Login from 'common/login'\nimport { useDerivWS } from 'store'\n\ntype EmailType = { email: string }\n\ntype ErrorType = Partial<EmailType>\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 100vh;\n    padding: auto 0;\n    justify-content: start;\n`\n\nconst ButtonContainer = styled.div`\n    margin-top: 2rem;\n`\n\nconst InputGroup = styled.div`\n    width: 40rem;\n    margin: 0 auto 3.4rem;\n`\n\nconst StyledButton = styled(Button)`\n    margin: 0.8rem 0.4rem;\n`\n\nconst resetValidation = (values: EmailType) => {\n    const errors: ErrorType = {}\n    const email = trimSpaces(values.email)\n    const email_error = validation.required(email) || validation.email(email)\n\n    if (email_error) {\n        errors.email = email_error\n    }\n\n    return errors\n}\n\nconst ResetPassword = () => {\n    const initialValues: EmailType = { email: '' }\n\n    const { send } = useDerivWS()\n\n    const resetSubmission = (values: EmailType, actions) => {\n        send({ verify_email: trimSpaces(values.email), type: 'reset_password' }, (response) => {\n            actions.setSubmitting(false)\n\n            if (response.error) {\n                actions.setStatus({\n                    error: response.error.message,\n                })\n                return\n            }\n\n            actions.resetForm({ email: '' })\n            actions.setStatus({\n                success: localize(\n                    'Please check your email and click on the link provided to reset your password.',\n                ),\n            })\n        })\n    }\n\n    return (\n        <Layout type=\"static\" margin_top=\"0\">\n            <SEO\n                title={localize('Reset password | Deriv')}\n                description={localize(\n                    'Forgot your Deriv password? Want to reset your password? Send us your email address and weâ€™ll email you the instructions.',\n                )}\n                no_index\n            />\n            <StyledContainer justify=\"center\" align=\"center\" direction=\"column\">\n                <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"80px\">\n                    {localize('Reset password')}\n                </Header>\n                <Header\n                    as=\"h4\"\n                    type=\"sub-section-title\"\n                    align=\"center\"\n                    weight=\"500\"\n                    mt=\"0.5rem\"\n                    mb=\"3.8rem\"\n                >\n                    {localize(\"We'll email you instructions to reset your password.\")}\n                </Header>\n                <Formik\n                    initialValues={initialValues}\n                    initialStatus={{}}\n                    validate={resetValidation}\n                    onSubmit={resetSubmission}\n                >\n                    {({\n                        values,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                        resetForm,\n                        status,\n                    }) => (\n                        <Form noValidate>\n                            <InputGroup>\n                                <Input\n                                    id=\"dm-email-input\"\n                                    name=\"email\"\n                                    error={errors.email}\n                                    value={trimSpaces(values.email)}\n                                    handleError={resetForm}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    autoComplete=\"off\"\n                                    type=\"text\"\n                                    label={localize('Email')}\n                                    background=\"white\"\n                                    placeholder=\"example@email.com\"\n                                    data-lpignore=\"true\"\n                                    required\n                                />\n                            </InputGroup>\n                            <Text align=\"center\" color=\"red\">\n                                {status.error}\n                            </Text>\n                            <Text align=\"center\" color=\"green\">\n                                {status.success}\n                            </Text>\n                            <ButtonContainer>\n                                <StyledButton\n                                    id=\"dm-pass-reset-login-link\"\n                                    tertiary\n                                    onClick={Login.redirectToLogin}\n                                    type=\"button\"\n                                >\n                                    {localize('Return to log in')}\n                                </StyledButton>\n                                <StyledButton\n                                    id=\"dm-pass-reset-button\"\n                                    secondary\n                                    disabled={isSubmitting}\n                                    type=\"submit\"\n                                >\n                                    {localize('Reset my password')}\n                                </StyledButton>\n                            </ButtonContainer>\n                        </Form>\n                    )}\n                </Formik>\n            </StyledContainer>\n        </Layout>\n    )\n}\n\nexport default WithIntl()(ResetPassword)\n"],"names":["validation_regex","email","url","alphabetic","number","validation","input","message","test","localize","name","required","StyledContainer","styled","Container","withConfig","displayName","componentId","ButtonContainer","InputGroup","StyledButton","Button","resetValidation","values","errors","trimSpaces","email_error","WithIntl","send","useDerivWS","React","Layout","type","margin_top","SEO","title","description","no_index","justify","align","direction","Header","as","mt","weight","mb","Formik","initialValues","initialStatus","validate","onSubmit","actions","verify_email","response","setSubmitting","error","setStatus","resetForm","success","handleChange","handleBlur","isSubmitting","status","Form","noValidate","Input","id","value","handleError","onChange","onBlur","autoComplete","label","background","placeholder","Text","color","tertiary","onClick","Login","secondary","disabled"],"sourceRoot":""}